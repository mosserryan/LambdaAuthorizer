openapi: "3.0.1"
info:
  title: "lambda-authorizer-example"
  version: "1.0"
servers:
- url: "https://scrtcm7m5a.execute-api.us-west-2.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/Prod"
paths:
  /users/{userName}:
    get:
      parameters:
      - name: "userName"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      security:
      - PhotoAppUsersLambdaAuthorizer: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:796162985282:function:lambda-authorizer-example-GetUserByUsernameHandler-2ZbFgGqga14F/invocations"
        passthroughBehavior: "when_no_match"
components:
  securitySchemes:
    PhotoAppUsersLambdaAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "request"
        authorizerUri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:796162985282:function:lambda-authorizer-example-LambdaAuthorizerFunction-v0Z3CyIAFz8W/invocations"
        authorizerResultTtlInSeconds: 0
        identitySource: "method.request.header.Authorization"
x-amazon-apigateway-request-validators:
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
